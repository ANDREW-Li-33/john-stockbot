This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-10-03T22:06:00.979Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
design_documents/
  detailed_development_timeline.md
  general_development_timeline.md
  parts_list.md
  primary_objectives.md
  system_archiecture.md
.gitignore
README.md

================================================================
Files
================================================================

================
File: design_documents/detailed_development_timeline.md
================
# John Stockbot - Detailed Development Timeline
*Autonomous Basketball Rebounding & Training Assistant*

## Week 1: Foundation Setup
### Hardware Tasks
- [ ] **Day 1-2**: Assemble flywheel system
  - Mount motors to frame
  - Install timing belts and pulleys
  - Verify wheel alignment and clearances
- [ ] **Day 2-3**: Build ball staging mechanism
  - Install stepper motor and lead screw
  - Test pushing plate movement
  - Verify ball feeding path
- [ ] **Day 3-4**: Camera mount assembly
  - Install tilt motor system
  - Mount ZED Mini securely
  - Cable management for USB-C

### Software Tasks
- [ ] **Day 1-2**: Development environment
  - Install ROS2 on Jetson
  - Set up CUDA toolkit
  - Configure ZED SDK
- [ ] **Day 3-4**: Basic communication
  - Teensy ↔ Jetson serial protocol
  - Test motor commands
  - Verify sensor data flow
- [ ] **Day 5**: Safety systems
  - Implement emergency stop
  - Add motor current limiting
  - Create watchdog timers

**Week 1 Deliverable**: All hardware assembled, basic software communication working

## Week 2: Subsystem Validation
### Vision Pipeline
- [ ] **Day 1-2**: Ball detection
  - Color segmentation in HSV space
  - Circle detection with Hough transform
  - Depth data integration
- [ ] **Day 3**: Tracking implementation
  - Kalman filter for ball state
  - Multi-frame association
  - FPS optimization

### Motor Control
- [ ] **Day 2-3**: Flywheel control
  - ESC initialization and calibration
  - Speed control via PWM
  - RPM sensing implementation
- [ ] **Day 4**: Stepper control
  - Teensy AccelStepper setup
  - Position feedback
  - Homing sequences

### Integration
- [ ] **Day 5**: First integration test
  - Vision → Jetson → Teensy → Motors
  - Measure end-to-end latency
  - Debug communication issues

**Week 2 Deliverable**: Individual subsystems tested and operational

## Week 3: Trajectory Prediction & Catching Logic
### Algorithm Development
- [ ] **Day 1-2**: Physics model
  - Implement projectile motion equations
  - Add air resistance compensation
  - Account for ball spin (Magnus effect)
- [ ] **Day 3**: Prediction refinement
  - Least squares trajectory fitting
  - Confidence scoring
  - Intercept point calculation

### Control Implementation
- [ ] **Day 3-4**: Catch sequence
  - State machine design
  - Timing synchronization
  - Ball containment verification
- [ ] **Day 5**: First catch attempts
  - Static drops from known height
  - Gentle tosses
  - Debug timing issues

**Week 3 Deliverable**: First successful ball catch from simple trajectory

## Week 4: Launch System & Basic Integration
### Flywheel Optimization
- [ ] **Day 1-2**: Launch characterization
  - Map RPM to launch distance
  - Test various ball compressions
  - Create lookup tables
- [ ] **Day 3**: Staging refinement
  - Optimize push speed
  - Ensure consistent ball position
  - Add ball presence detection

### System Integration
- [ ] **Day 4-5**: Full cycle testing
  - Detect → Track → Catch → Stage → Launch
  - Identify bottlenecks
  - Optimize state transitions

**Week 4 Deliverable**: Complete static robot catching and returning balls

## Week 5: Performance Optimization
### Catching Improvements
- [ ] **Day 1-2**: Trajectory accuracy
  - Multi-point trajectory fitting
  - Adaptive filter tuning
  - Earlier detection optimization
- [ ] **Day 3**: Success rate improvement
  - Analyze failure modes
  - Adjust intercept timing
  - Expand catch envelope

### Passing Accuracy
- [ ] **Day 4-5**: Launch precision
  - Closed-loop RPM control
  - Compensate for ball condition
  - Add aim adjustment for spin

**Week 5 Deliverable**: >85% catch rate, ±1.5m passing accuracy

## Week 6: Advanced Features & Testing
### Player Tracking
- [ ] **Day 1-2**: Human detection
  - Implement pose estimation
  - Track player position
  - Predict player movement
- [ ] **Day 3**: Adaptive passing
  - Adjust launch power for distance
  - Lead passing for moving players
  - Safety zones implementation

### Robustness Testing
- [ ] **Day 4-5**: Stress testing
  - Continuous operation tests
  - Various shot types and speeds
  - Edge case handling

**Week 6 Deliverable**: 90% catch rate achieved, player-aware passing

## Week 7: Mobility Platform
### Drivetrain Integration
- [ ] **Day 1-2**: Motor control
  - X-drive kinematics implementation
  - Individual wheel speed control
  - Odometry estimation
- [ ] **Day 3**: Basic navigation
  - Point-to-point movement
  - Rotation control
  - Acceleration profiles

### Mobile Interception
- [ ] **Day 4-5**: Path planning
  - Intercept point prediction
  - Optimal path calculation
  - Dynamic re-planning

**Week 7 Deliverable**: Mobile platform operational with basic intercepts

## Week 8: System Integration & Polish
### Full Integration
- [ ] **Day 1-2**: Mobile catching
  - Tune mobile intercept timing
  - Optimize positioning strategy
  - Handle platform motion during catch
- [ ] **Day 3**: System optimization
  - Code optimization for latency
  - Power management
  - Reliability improvements

### Documentation & Demo
- [ ] **Day 4**: Documentation
  - Code documentation
  - System operation guide
  - Troubleshooting guide
- [ ] **Day 5**: Demo preparation
  - Record demo videos
  - Prepare presentation
  - Final testing session

**Week 8 Deliverable**: Fully operational mobile basketball rebounding robot

## Critical Dependencies

```mermaid
graph TD
    A[Hardware Assembly] --> B[Motor Control]
    A --> C[Vision Pipeline]
    C --> D[Ball Tracking]
    D --> E[Trajectory Prediction]
    B --> F[Flywheel Control]
    B --> G[Staging Control]
    E --> H[Catch Logic]
    F --> I[Launch System]
    G --> I
    H --> J[Static Catching]
    I --> J
    J --> K[Performance Opt]
    K --> L[Mobile Platform]
    L --> M[Full System]
```

## Daily Development Schedule
- **Morning (2-3 hrs)**: Hardware tasks, mechanical adjustments, testing
- **Afternoon (3-4 hrs)**: Software development, algorithm implementation
- **Evening (1-2 hrs)**: Integration testing, debugging, documentation

## Risk Management Buffer
- Week 3, 5, 7: Each has 1 day buffer for unexpected issues
- Week 8: 2 days buffer for final integration challenges

================
File: design_documents/general_development_timeline.md
================
# John Stockbot - General Timeline
*Autonomous Basketball Rebounding & Training Assistant*

## Project Duration: 8 Weeks (2 Months)

### Phase 1: Foundation (Weeks 1-2)
**Goal**: Establish core infrastructure and validate critical subsystems

- Complete mechanical assembly of static platform
- Set up development environment (ROS2, CUDA, simulation)
- Validate sensor pipeline (ZED Mini → Jetson)
- Initial motor control testing (Teensy → motors)
- Create basic safety systems

**Key Milestone**: First successful ball detection and tracking demo

### Phase 2: Core Functionality (Weeks 3-4)
**Goal**: Achieve basic catch and return capability

- Implement trajectory prediction algorithms
- Develop staging mechanism control
- Tune flywheel launch parameters
- Create ball capture/containment system
- Integration of vision → control pipeline

**Key Milestone**: First successful catch and return of stationary-launched ball

### Phase 3: Performance Optimization (Weeks 5-6)
**Goal**: Reach target performance metrics for static operation

- Optimize catching success rate through testing
- Implement adaptive trajectory prediction
- Add player detection and tracking
- Refine launch accuracy and power control
- Stress test all subsystems

**Key Milestone**: 90% catch rate from 3-point line, accurate returns

### Phase 4: Mobility Integration (Week 7)
**Goal**: Add mobile platform capabilities

- Integrate omni-wheel drivetrain control
- Implement path planning to intercept points
- Develop position control and odometry
- Create court awareness and boundary detection
- Test mobile interception strategies

**Key Milestone**: First successful mobile intercept

### Phase 5: System Refinement (Week 8)
**Goal**: Polish, document, and prepare for extended use

- Full system integration testing
- Performance tuning and optimization
- Safety validation and failure mode testing
- Documentation and code cleanup
- Demo video preparation

**Key Milestone**: 1-hour autonomous operation demo

## Parallel Development Tracks

### Track A: Vision & Intelligence (Continuous)
- Ball detection/tracking
- Trajectory prediction
- Player tracking
- Court mapping

### Track B: Mechanical & Control (Continuous)
- Motor control firmware
- Staging mechanism
- Flywheel control
- Drivetrain integration

### Track C: Software Architecture (Continuous)
- ROS2 node development
- Inter-process communication
- State machine design
- Error handling

## Risk Mitigation Schedule

### Weekly Testing Sessions
- **Monday**: Component testing
- **Wednesday**: Integration testing
- **Friday**: Full system testing on court

### Critical Path Items (Must Not Slip)
1. Week 1: Vision pipeline operational
2. Week 2: Motor control validated
3. Week 3: First catch attempt
4. Week 4: Reliable static operation
5. Week 6: Performance targets met

## Resource Allocation

### Week 1-2: 70% Hardware, 30% Software
- Focus on mechanical completion
- Basic software infrastructure

### Week 3-4: 30% Hardware, 70% Software
- Software-heavy algorithm development
- Hardware debugging as needed

### Week 5-6: 20% Hardware, 80% Software
- Primarily software optimization
- Minor mechanical adjustments

### Week 7-8: 40% Hardware, 60% Software
- Balance between mobility hardware and integration software

## Success Checkpoints

| Week | Checkpoint | Go/No-Go Criteria |
|------|------------|-------------------|
| 2 | Vision system operational | Track ball at 30 FPS |
| 4 | Static catch demonstrated | >50% success rate |
| 6 | Performance targets met | >90% catch rate |
| 8 | Full system operational | Mobile intercepts working |

================
File: design_documents/parts_list.md
================
# Parts List

## Vision

| Quantity x Part | Category | Cost | Notes | Ord/Recv? | Vendor |
|----------------|----------|------|-------|-----------|--------|
| 1x camera attachment | Structural | $0 | Printed | ✅ | N/A |
| 1x tilt motor base | Structural | $0 | Printed | ✅ | N/A |
| 1x NEMA 17 Motor | Motion | $0 | Should have at home | ✅ | N/A |
| 1x Zed Mini camera | Electronics | [$400](https://www.stereolabs.com/store/products/zed-mini) | | ✅ / ✅ | StereoLabs |
| 1x Flanged ball bearing (Flange 22mm OD, 6mm shaft hole) | Motion | [$9.97](https://www.mcmaster.com/catalog/131/1424/57155K483) | | ✅ / ✅ | McMaster Carr |
| 2x M2 x 0.4 mm Thread, 6 mm Long | Fasteners | [$15.68](https://www.mcmaster.com/catalog/131/3556/91290A013) | Fasten camera to attachment | ✅ / ✅ | McMaster Carr |
| 4x M3 x 0.5 mm Thread, 12 mm Long | Fasteners | [$11.29](https://www.mcmaster.com/catalog/131/3556/91290A117) | Fasten tilt motor to base | ✅ / ✅ | McMaster Carr |
| 1x Right angle USB C extension | Electronics | [$4.99](https://www.amazon.com/dp/B077XL7Q7H?ref_=ppx_hzsearch_conn_dt_b_fed_asin_title_1) | | ✅ / ✅ | Amazon |
| 2x TMC2209 V1.3 UART Stepper Motor Driver | Electronics | [$13.99](https://www.amazon.com/dp/B08SMDY3SQ?ref=ppx_yo2ov_dt_b_fed_asin_title&th=1) | | ✅ / ✅ | Amazon |
| **Total cost** | **All** | **$436.94** | | | |

## Flywheel

| Quantity x Part | Category | Cost | Notes | Ord/Recv? | Vendor |
|----------------|----------|------|-------|-----------|--------|
| 2x electric speed controller | Electronics | [$152](https://www.amazon.com/FLIPSKY-Electric-Controller-Skateboard-FSESC6-7/dp/B09MJZ8JRW/ref=pd_day0fbt_hardlines_d_sccl_1/146-3257968-8514663?pd_rd_w=YFJ9x&content-id=amzn1.sym.06aea998-aa9c-454e-b467-b476407c7977&pf_rd_p=06aea998-aa9c-454e-b467-b476407c7977&pf_rd_r=T1ATW3HQBBX6FVZ7DBTC&pd_rd_wg=TkkIG&pd_rd_r=785686e6-9ea1-49b2-9166-6f2505c2af96&pd_rd_i=B09MJZ8JRW&psc=1) | For flywheel motors | ✅/ ✅ | Amazon |
| 2x motors (6384 120KV) | Motion | [$202.84](https://www.aliexpress.us/item/3256808965567922.html?spm=a2g0o.detail.0.0.1867DpWvDpWvp5&mp=1&pdp_npi=5%40dis%21USD%21USD%2084.51%21USD%2050.71%21%21USD%2050.71%21%21%21%402101c59117565753970613812eed3c%2112000048109401745%21ct%21US%21-1%21%212%210&_gl=1*1i9ltb9*_gcl_aw*R0NMLjE3NTY1NzM2MTUuQ2owS0NRand3c3JGQmhENkFSSXNBUG5VRkQzajA4MGc2SlZFZS1vQ1B1eXRCQ19jdVV3VkIzdEtQQjZTRWF2Q0RnSE9XSjgwNjg0cjVMSWFBbHZsRUFMd193Y0I.*_gcl_dc*R0NMLjE3NTY1NzIyMDguQ2owS0NRand3c3JGQmhENkFSSXNBUG5VRkQxejBxZFhFMmFSRE9WTGZEeUYxNklHZk51NDBkQS1BTEtaaUxlakFUVWc3Y2RDSlBpWG81b2FBZ0hCRUFMd193Y0I.*_gcl_au*MTY5NDkwNzY2Ny4xNzU1NTY1OTMx*_ga*NzQ2MDE4MjM1LjE3NTY1NzM2MTU.*_ga_VED1YSGNC7*czE3NTY1NzM2MTQkbzEkZzEkdDE3NTY1NzUzOTYkajI0JGwwJGgw&gatewayAdapt=glo2usa) | To drive the flywheel | ✅/ ✅ | Amazon |
| 2x wheels (50mm x 200mm 70A) | Motion | [$81.72](https://www.aliexpress.us/item/3256802735023252.html?spm=a2g0o.cart.0.0.2f8e38daqCFqJj&mp=1&pdp_npi=5%40dis%21USD%21USD%2051.07%21USD%2040.86%21%21USD%2040.86%21%21%21%402151e6dc17565753644493248eef53%2112000022809170240%21ct%21US%21-1%21%212%210&_gl=1*1mugqji*_gcl_aw*R0NMLjE3NTY1NzM2MTUuQ2owS0NRand3c3JGQmhENkFSSXNBUG5VRkQzajA4MGc2SlZFZS1vQ1B1eXRCQ19jdVV3VkIzdEtQQjZTRWF2Q0RnSE9XSjgwNjg0cjVMSWFBbHZsRUFMd193Y0I.*_gcl_dc*R0NMLjE3NTY1NzIyMDguQ2owS0NRand3c3JGQmhENkFSSXNBUG5VRkQxejBxZFhFMmFSRE9WTGZEeUYxNklHZk51NDBkQS1BTEtaaUxlakFUVWc3Y2RDSlBpWG81b2FBZ0hCRUFMd193Y0I.*_gcl_au*MTY5NDkwNzY2Ny4xNzU1NTY1OTMx*_ga*NzQ2MDE4MjM1LjE3NTY1NzM2MTU.*_ga_VED1YSGNC7*czE3NTY1NzM2MTQkbzEkZzEkdDE3NTY1NzUzNjQkajU2JGwwJGgw&gatewayAdapt=glo2usa) | Belt grinder contact wheels for the flywheel | ✅/ ✅ | Aliexpress |
| 2x Timing Pulley (24T HTD, 20mm bore diameter, 16mm width) | Motion | [$8.67](https://www.aliexpress.us/item/3256807191398660.html?spm=a2g0o.order_detail.order_detail_item.5.6582f19ch50VIQ&gatewayAdapt=glo2usa) | Timing pulley for jackshaft | ✅ / ✅ | Aliexpress |
| 2x Timing Pulley (24T HTD 5M, 10mm bore diameter, 16mm width) | Motion | [$9.12](https://www.aliexpress.us/item/3256807191398660.html?spm=a2g0o.order_detail.order_detail_item.5.6582f19ch50VIQ&gatewayAdapt=glo2usa) | Timing pulley for motor shaft | ✅/ ✅ | Aliexpress |
| 2x Timing Belt (HTD 5M 15mm width, 300mm length) | Motion | [$13.24](https://www.aliexpress.us/item/3256808065188881.html?spm=a2g0o.order_list.order_list_main.4.21ef1802wDc5FO&gatewayAdapt=glo2usa) | Timing belt | ✅ / ✅ | Aliexpress |
| 4x Bearing mount (KFL004 20mm shaft dia.) | Structural | [$25.98](https://www.amazon.com/dp/B0F3D8BG1X?smid=A386KSEWCUN8Y5&ref_=chk_typ_imgToDp&th=1) | Flush mounted bearings | ✅ / ✅ | Amazon |
| 1x Rotary shaft (25mm dia. 400mm lg.) | Motion | [$23.67](https://www.mcmaster.com/catalog/131/1369/1482K43) | Jackshaft - To be keyed later using manual mill | ❌ / ❌ | McMaster Carr |
| 4x Shaft collar (25mm bore) | Motion | [$26.96](https://www.mcmaster.com/catalog/131/1470/57485K78) | | | |
| **Total cost** | **All** | **$544.20** | | | |

## Drivetrain

| Quantity x Part | Category | Cost | Notes | Ord/Recv? | Vendor |
|----------------|----------|------|-------|-----------|--------|
| 4x 6" omni wheels | Motion | [$60](https://www.vexrobotics.com/omni-wheels.html?srsltid=AfmBOoqJTPTl3u6XRGaV-DuOlCQGosI-hweimPl4zFRMNVMioTJmjuGk) | v1 wheels | ✅/ ✅ | VEX |
| **Total cost** | **All** | **$60** | | | |

## Electronics

| Quantity x Part | Category | Cost | Notes | Ord/Recv? | Vendor |
|----------------|----------|------|-------|-----------|--------|
| 1x Jetson Orin Nano Super Developer Kit | Electronics | [$249](https://www.amazon.com/NVIDIA-Jetson-Orin-Nano-Developer/dp/B0BZJTQ5YP/ref=sr_1_3?crid=2ZPEBPJH7R6AW&dib=eyJ2IjoiMSJ9.MRN1oKLUM58HHNbiwC8z6YfBSwYeCrCk802funuW0C9mmxh0pBNTBZxdO7d61FVMeiWMYRgomMIcbQ_sK6Wr0iB4flIoUO4GBbPiZy_woZUtyqJItn9d7ts3TFBZZiTzA8ORazlC98-Fqr6HyBuQjnV7O62tgNUSsyuN8XNQb7fQpbt7F32w6eEFkVXXaNMvNSQ2M56UhgTb9f-G4RYiiPLlZUUfQkXpaYX0AXhEP9o.FI5mZBNwxWBY1s-6UnLQu59860C6ZmkvOnQiECSJ9Yk&dib_tag=se&keywords=jetson+nano&qid=1757106093&sprefix=jetson+nan%2Caps%2C178&sr=8-3) | Orin Nano, not just Nano | ✅/ ✅ | Amazon |
| 1x Teensy 4.1 | Electronics | [$35.00](https://www.amazon.com/dp/B088JY7P2H?ref=ppx_yo2ov_dt_b_fed_asin_title) | | ✅ / ✅ | Amazon |
| 1x 24V power supply | Electronics | [$15.99](https://www.amazon.com/dp/B078RY7BPL?ref=ppx_yo2ov_dt_b_fed_asin_title&th=1) | Plugs into outlet | ✅ / ✅ | Amazon |
| **Total cost** | **All** | **$299.99** | | | |

## Misc

| Quantity x Part | Category | Cost | Notes | Ord/Recv? | Vendor |
|----------------|----------|------|-------|-----------|--------|
| 1x Wilson Basketball | Misc | [$26.99](https://www.amazon.com/dp/B091MQ4P7D?ref=ppx_yo2ov_dt_b_fed_asin_title&th=1) | | ✅ / ✅ | Amazon |
| 1x Air pump | Misc | [$11.99](https://www.amazon.com/dp/B01A425KQW?ref=ppx_yo2ov_dt_b_fed_asin_title&th=1) | | ✅ / ✅ | Amazon |
| **Total cost** | **All** | **$38.98** | | | |

---

**Project Total: $1,380.11**

================
File: design_documents/primary_objectives.md
================
# John Stockbot - Primary Objectives
*Autonomous Basketball Rebounding & Training Assistant*

## Mission Statement
Develop an autonomous robot capable of intercepting basketballs in flight and returning them to players, initially as a static platform with future mobility capabilities.

## Core Objectives

### 1. Ball Detection & Tracking (Priority: Critical)
- **Objective**: Achieve robust real-time basketball detection and trajectory prediction
- **Success Metrics**:
  - Detection rate: >95% of shots from NBA 3-point line
  - Tracking latency: <50ms from detection to trajectory calculation
  - Trajectory prediction accuracy: ±20cm at intercept point
- **Key Requirements**:
  - Process ZED Mini depth + RGB data at minimum 30 FPS
  - Handle varying lighting conditions on indoor court
  - Track ball spin and account for Magnus effect in trajectory

### 2. Ball Interception (Priority: Critical)
- **Objective**: Successfully catch basketballs before ground contact
- **Success Metrics**:
  - Catching success rate: >90% for predicted intercepts within range
  - No damage to ball or safety hazards
  - Reliable ball containment post-catch
- **Key Requirements**:
  - Position accuracy: ±15cm at intercept point
  - Timing precision: ±100ms for intercept
  - Safe deceleration of ball momentum

### 3. Ball Return System (Priority: High)
- **Objective**: Return caught balls to player efficiently
- **Success Metrics**:
  - Launch consistency: ±1m accuracy at 10m distance
  - Return time: <3 seconds from catch to launch
  - Adjustable pass strength for various distances
- **Key Requirements**:
  - Flywheel speed control for variable pass distance (3-15m)
  - Reliable ball staging and feeding mechanism
  - Safety shutoff if player is too close

### 4. Platform Mobility (Priority: Medium - Phase 2)
- **Objective**: Enable autonomous navigation to optimal intercept positions
- **Success Metrics**:
  - Movement speed: >2 m/s
  - Positioning accuracy: ±10cm
  - Zero-turn capability for quick orientation changes
- **Key Requirements**:
  - Smooth omnidirectional movement via X-drive
  - Dynamic path planning to intercept point
  - Collision avoidance with court boundaries/obstacles

### 5. System Integration (Priority: High)
- **Objective**: Seamless coordination between all subsystems
- **Success Metrics**:
  - End-to-end latency: <200ms from detection to motion command
  - System reliability: >95% uptime during operation
  - Graceful failure handling
- **Key Requirements**:
  - Real-time communication between Jetson and Teensy
  - Synchronized control loops at 100Hz minimum
  - Robust error recovery mechanisms

## Development Principles

### Safety First
- Emergency stop capability at all times
- Soft-start for all motors
- Protected pinch points and moving parts
- Clear operational boundaries

### Iterative Development
- Start with static operation, validate core functionality
- Add mobility only after catching/passing proven
- Continuous testing on real court with real shots

### Modular Architecture
- Independent testing of each subsystem
- Clear interfaces between modules
- Version control for both hardware and software iterations

## Success Criteria for MVP (Month 1)
1. ✓ Detect and track basketball from 3-point line
2. ✓ Predict trajectory with <30cm error
3. ✓ Successfully catch 75% of straight shots
4. ✓ Return ball to fixed position via flywheel
5. ✓ Operate safely for 30-minute sessions

## Success Criteria for Version 1.0 (Month 2)
1. ✓ All MVP criteria at improved metrics
2. ✓ Mobile platform operational
3. ✓ Dynamic positioning for intercepts
4. ✓ Catch rate >90% within operational envelope
5. ✓ Variable distance passing with player tracking
6. ✓ 1-hour continuous operation capability

================
File: design_documents/system_archiecture.md
================
# John Stockbot - System Architecture
*Autonomous Basketball Rebounding & Training Assistant*

## Architecture Rationale

The John Stockbot system employs a **hierarchical, distributed architecture** combining high-level intelligence on the Jetson Orin Nano with real-time control on the Teensy 4.1. This design was chosen for several critical reasons: First, it separates computationally intensive vision processing from time-critical motor control, ensuring deterministic response times for safety-critical operations. Second, it leverages the strengths of each platform - the Jetson's GPU for neural networks and computer vision, and the Teensy's real-time capabilities for precise motor control. Third, the modular design allows parallel development and independent testing of subsystems, crucial for a solo developer working on a tight timeline. The ROS2 framework provides standardized interfaces and tools for debugging, while the distributed nature ensures that a failure in one subsystem doesn't cascade to others, improving overall system reliability.

## System Overview

```
┌─────────────────────────────────────────────────────────────┐
│                     High-Level Intelligence                  │
│                    (Jetson Orin Nano Super)                 │
│  ┌──────────┐ ┌──────────┐ ┌──────────┐ ┌──────────────┐  │
│  │  Vision  │ │Trajectory│ │ Mission  │ │Path Planning │  │
│  │Processing│ │Prediction│ │ Planner  │ │& Navigation  │  │
│  └──────────┘ └──────────┘ └──────────┘ └──────────────┘  │
│                        ROS2 Framework                        │
└─────────────────────────────────────────────────────────────┘
                            │
                   Serial/USB Connection
                         (115200 baud)
                            │
┌─────────────────────────────────────────────────────────────┐
│                    Real-Time Control Layer                   │
│                        (Teensy 4.1)                         │
│  ┌──────────┐ ┌──────────┐ ┌──────────┐ ┌──────────────┐  │
│  │ Flywheel │ │ Staging  │ │Drivetrain│ │Camera Gimbal │  │
│  │  Control │ │Mechanism │ │  Control │ │   Control    │  │
│  └──────────┘ └──────────┘ └──────────┘ └──────────────┘  │
│                     Safety & Watchdog                        │
└─────────────────────────────────────────────────────────────┘
```

## Layer 1: Perception & Intelligence (Jetson Orin Nano)

### Vision Processing Node
**Responsibility**: Process ZED Mini camera data for object detection and tracking
- **Input**: RGB-D stream at 720p, 60 FPS
- **Processing**:
  - Ball detection using color segmentation + Hough circles
  - Player detection using pose estimation (OpenPose or MediaPipe)
  - Court boundary detection via line detection
- **Output**: Object positions in 3D world coordinates
- **Update Rate**: 30 Hz minimum

### Trajectory Prediction Node
**Responsibility**: Calculate ball flight path and intercept point
- **Input**: Ball position history (last 5-10 frames)
- **Processing**:
  - Kalman filter for state estimation
  - Physics model with drag coefficient
  - Confidence scoring for predictions
- **Output**: Predicted intercept point and time
- **Update Rate**: 30 Hz

### Mission Planning Node
**Responsibility**: High-level decision making and state management
- **States**:
  1. IDLE - Waiting for ball detection
  2. TRACKING - Following ball trajectory
  3. INTERCEPTING - Moving to catch position
  4. CATCHING - Executing catch sequence
  5. STAGING - Preparing ball for launch
  6. AIMING - Calculating launch parameters
  7. LAUNCHING - Executing pass
- **Output**: State commands and target positions
- **Update Rate**: 10 Hz

### Path Planning Node (Mobile Configuration)
**Responsibility**: Calculate optimal paths for interception
- **Input**: Current position, target intercept point, obstacles
- **Algorithm**: A* or RRT* for real-time planning
- **Output**: Waypoint sequence for drivetrain
- **Update Rate**: 10 Hz

## Layer 2: Real-Time Control (Teensy 4.1)

### Communication Interface
- **Protocol**: Custom binary protocol over Serial
- **Message Types**:
  - Motor commands (position, velocity, acceleration)
  - Sensor requests (encoder, IMU, limit switches)
  - Status updates (faults, temperatures, battery)
- **Bandwidth**: ~10 KB/s at 100 Hz update rate

### Flywheel Controller
**Responsibility**: Manage dual-motor flywheel system
- **Control Mode**: Closed-loop RPM control via ESCs
- **Sensors**: Hall effect for RPM feedback
- **Safety**: Soft-start, over-current protection
- **Performance**: 0-6000 RPM in <2 seconds

### Staging Mechanism Controller
**Responsibility**: Control ball feeding into flywheel
- **Actuator**: NEMA 17 stepper with TMC2209 driver
- **Control**: Position control with AccelStepper library
- **Feedback**: Limit switches for home/end positions
- **Sequence**: Home → Load → Stage → Push → Retract

### Drivetrain Controller (Mobile Configuration)
**Responsibility**: Execute omnidirectional movement
- **Configuration**: 4-wheel X-drive with omni wheels
- **Control**: Inverse kinematics for wheel speeds
- **Feedback**: Encoder-based odometry
- **Performance**: 2 m/s max speed, 1 m/s² acceleration

### Camera Gimbal Controller
**Responsibility**: Orient camera for optimal tracking
- **Actuator**: NEMA 17 for tilt axis
- **Range**: -30° to +60° tilt
- **Control**: Position tracking of ball trajectory
- **Update Rate**: 50 Hz

## Inter-Process Communication

### ROS2 Topics Structure
```
/perception/ball_detection      - sensor_msgs/PointCloud2
/perception/player_pose         - geometry_msgs/PoseArray
/prediction/ball_trajectory     - custom_msgs/Trajectory
/planning/mission_state         - custom_msgs/MissionState
/control/motor_commands         - custom_msgs/MotorCommand
/control/motor_feedback         - custom_msgs/MotorFeedback
/system/diagnostics            - diagnostic_msgs/DiagnosticArray
```

### Communication Flow
```mermaid
sequenceDiagram
    participant Camera as ZED Mini
    participant Vision as Vision Node
    participant Predict as Prediction Node
    participant Mission as Mission Planner
    participant Teensy as Teensy 4.1
    participant Motors as Motors/ESCs
    
    Camera->>Vision: RGB-D Frame
    Vision->>Predict: Ball Position
    Predict->>Mission: Trajectory
    Mission->>Teensy: Motor Commands
    Teensy->>Motors: PWM/Step Signals
    Motors->>Teensy: Encoder Feedback
    Teensy->>Mission: Status Update
```

## Data Flow & Timing

### Critical Path Latencies
- Camera → Ball Detection: 20ms
- Ball Detection → Trajectory: 10ms
- Trajectory → Mission Decision: 5ms
- Mission → Teensy Command: 5ms
- Teensy → Motor Response: 10ms
- **Total: 50ms end-to-end**

### Control Loop Frequencies
- Vision Processing: 30 Hz
- Trajectory Updates: 30 Hz
- Mission Planning: 10 Hz
- Motor Control: 100 Hz
- Safety Monitoring: 1000 Hz

## Fault Tolerance & Safety

### Failure Modes
1. **Vision Loss**: Immediate stop, maintain last known state
2. **Communication Loss**: Teensy enters safe mode after 100ms
3. **Motor Fault**: Disable affected subsystem, alert operator
4. **Power Loss**: Controlled shutdown, brake motors

### Safety Systems
- **Hardware E-Stop**: Physical button bypassing all software
- **Software Watchdog**: Teensy monitors Jetson heartbeat
- **Current Limiting**: Prevent motor burnout
- **Boundary Detection**: Virtual walls for court limits
- **Proximity Detection**: Stop if human too close to moving parts

## Development & Debugging Infrastructure

### Simulation Environment
- **Gazebo**: Physics simulation for trajectory testing
- **RViz**: Visualization of perception and planning
- **PlotJuggler**: Real-time data plotting

### Logging & Diagnostics
- **ROS2 Bags**: Record all topics for replay
- **Teensy Serial**: Debug output at 115200 baud
- **System Metrics**: CPU, GPU, memory, temperature monitoring

### Testing Interfaces
- **Manual Override**: Direct motor control via gamepad
- **Trajectory Injection**: Test with synthetic ball paths
- **Component Testing**: Individual node testing framework

## Scalability & Future Enhancements

### Modular Expansions
- **Dual Camera**: Stereo vision for better depth
- **IMU Integration**: Better mobile platform odometry
- **LIDAR**: Obstacle detection for navigation
- **Audio Feedback**: Speaker for user interaction

### Performance Upgrades
- **GPU Acceleration**: TensorRT for neural networks
- **FPGA Co-processor**: Ultra-low latency trajectory
- **Better Motors**: Brushless for drivetrain efficiency

### Software Enhancements
- **Machine Learning**: Shot prediction from player pose
- **Multi-Ball Tracking**: Handle multiple balls simultaneously
- **Adaptive Control**: Learn optimal parameters over time

================
File: .gitignore
================
repomix.txt

================
File: README.md
================
# rebounding-robot
